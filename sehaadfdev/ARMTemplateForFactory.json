{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "sehaadfdev"
		},
		"PtCGM_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'PtCGM'"
		},
		"PtCGM_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://accountali.dfs.core.windows.net"
		},
		"Snowflake_Credentials_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Snowflake_Credentials'"
		},
		"AKV_Snowflake_JDBC_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://adfdevSnowflake.vault.azure.net/"
		},
		"Snowflake_KeyVault_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "adfdevSnowflakeJDBC"
		},
		"linkedService1_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'linkedService1'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/PtCGM')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('PtCGM_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('PtCGM_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Snowflake_Credentials')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Snowflake",
				"typeProperties": {
					"connectionString": "[parameters('Snowflake_Credentials_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AKV_Snowflake_JDBC')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AKV_Snowflake_JDBC_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Snowflake_KeyVault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Snowflake",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AKV_Snowflake_JDBC",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('Snowflake_KeyVault_properties_typeProperties_connectionString_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AKV_Snowflake_JDBC')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Test_Copy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SnowflakeSink",
								"importSettings": {
									"type": "SnowflakeImportCopyCommand"
								}
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "linkedService1",
									"type": "LinkedServiceReference"
								},
								"path": "data/adfstaging"
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "PtID",
											"type": "String"
										},
										"sink": {
											"name": "PTID",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "ParentNDeviceUploadsID",
											"type": "String"
										},
										"sink": {
											"name": "PARENTNDEVICEUPLOADSID",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "DeviceDtTm",
											"type": "String"
										},
										"sink": {
											"name": "DEVICEDTTM",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "RecId",
											"type": "String"
										},
										"sink": {
											"name": "RECID",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "RecordType",
											"type": "String"
										},
										"sink": {
											"name": "RECORDTYPE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Value",
											"type": "String"
										},
										"sink": {
											"name": "DVALUE",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "ValRange",
											"type": "String"
										},
										"sink": {
											"name": "VALRANGE",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DelimitedText1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SnowflakeTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]",
				"[concat(variables('factoryId'), '/datasets/SnowflakeTable1')]",
				"[concat(variables('factoryId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "PtCGM",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Pt105.csv",
						"folderPath": "Patient",
						"fileSystem": "demo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/PtCGM')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SnowflakeTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Snowflake_Credentials",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SnowflakeTable",
				"schema": [
					{
						"name": "PTID",
						"type": "NUMBER",
						"precision": 38,
						"scale": 0
					},
					{
						"name": "PARENTNDEVICEUPLOADSID",
						"type": "NUMBER",
						"precision": 38,
						"scale": 0
					},
					{
						"name": "DEVICEDTTM",
						"type": "VARCHAR",
						"precision": 160,
						"scale": 0
					},
					{
						"name": "RECID",
						"type": "NUMBER",
						"precision": 38,
						"scale": 0
					},
					{
						"name": "RECORDTYPE",
						"type": "VARCHAR",
						"precision": 160,
						"scale": 0
					},
					{
						"name": "DVALUE",
						"type": "FLOAT",
						"precision": 15,
						"scale": 0
					},
					{
						"name": "VALRANGE",
						"type": "VARCHAR",
						"precision": 160,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "RAW",
					"table": "DALLASBI"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Snowflake_Credentials')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/linkedService1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('linkedService1_sasUri')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Test_Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "loadsnowflake",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "Snowflake_KeyVault",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('create or replace '\n\t\t, pipeline().parameters.targettype\n\t\t, ' '\n\t\t, concat(pipeline().parameters.db, '.', pipeline().parameters.stageschema, '.', pipeline().parameters.target)\n\t\t, ' as '\n\t\t, pipeline().parameters.inputSQL\n\t\t)",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "call test",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "loadsnowflake",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Test_CountThreshold",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"db": {
									"value": "@pipeline().parameters.db",
									"type": "Expression"
								},
								"stageschema": {
									"value": "@pipeline().parameters.stageschema",
									"type": "Expression"
								},
								"finalschema": {
									"value": "@pipeline().parameters.finalschema",
									"type": "Expression"
								},
								"threshold": {
									"value": "@pipeline().parameters.threshold",
									"type": "Expression"
								},
								"target": {
									"value": "@pipeline().parameters.target",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "alter table",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "call test",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "Snowflake_KeyVault",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('alter table '\n, concat(pipeline().parameters.db, '.', pipeline().parameters.finalschema, '.', pipeline().parameters.target)\n, ' swap with '\n, concat(pipeline().parameters.db, '.', pipeline().parameters.stageschema, '.', pipeline().parameters.target)\n)",
										"type": "Expression"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"inputSQL": {
						"type": "string",
						"defaultValue": "select  * from dev.raw.dallasbi where valrange in ('Low', 'High')"
					},
					"target": {
						"type": "string",
						"defaultValue": "PtGlucose"
					},
					"targettype": {
						"type": "string",
						"defaultValue": "table"
					},
					"stageschema": {
						"type": "string",
						"defaultValue": "stage"
					},
					"finalschema": {
						"type": "string",
						"defaultValue": "zfinal"
					},
					"threshold": {
						"type": "float",
						"defaultValue": 0.75
					},
					"db": {
						"type": "string",
						"defaultValue": "dev"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Snowflake_KeyVault')]",
				"[concat(variables('factoryId'), '/pipelines/Test_CountThreshold')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Test_CountThreshold')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeSource",
								"query": {
									"value": "@concat(\n'select DIV0(s.s1, f.f1) as t1\nfrom (select count(*) as s1 from '\n, concat(pipeline().parameters.db, '.', pipeline().parameters.stageschema, '.', pipeline().parameters.target)\n, ' ) s\ncross join\n(select count(*) as f1 from '\n, concat(pipeline().parameters.db, '.', pipeline().parameters.finalschema, '.', pipeline().parameters.target)\n,   ' ) f'\n)",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "Threshold",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greaterOrEquals(activity('Lookup1').output.firstrow.t1, pipeline().parameters.threshold)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Fail1",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": "stage table has less than threshold value of 75% of final",
										"errorCode": "stage less than final"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"db": {
						"type": "string",
						"defaultValue": "dev"
					},
					"stageschema": {
						"type": "string",
						"defaultValue": "stage"
					},
					"finalschema": {
						"type": "string",
						"defaultValue": "zfinal"
					},
					"threshold": {
						"type": "float",
						"defaultValue": 0.75
					},
					"target": {
						"type": "string",
						"defaultValue": "PtGlucose"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Threshold')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Threshold')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Snowflake_KeyVault",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SnowflakeTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Snowflake_KeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Test_Master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Create Target",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Test_Load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Test_Load')]"
			]
		}
	]
}